@page "/login"
@inject NavigationManager NavManager
@inject Radzen.NotificationService notificationService
@inject DialogService DialogService
@inject MCON451.Web.Data.ICookieFactory cookieFactory;
@inject IJSRuntime JsRuntime;
<div class="container">
    @if (!string.IsNullOrEmpty(AppState.CurrentUser?.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @((MarkupString)AppState.CurrentUser?.ErrorMessage)
        </div>
    }
    <!-- Outer Row -->
    <div class="row justify-content-center">
        <div class="col-xl-10 col-lg-12 col-md-9">
    <div class="page-header align-items-start min-vh-100" style="background-image: url('https://images.unsplash.com/photo-1497294815431-9365093b7331?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1950&q=80');">
      <span class="mask bg-gradient-dark opacity-6"></span>
      <div class="container my-auto">
        <div class="row">
          <div class="col-lg-4 col-md-8 col-12 mx-auto">
            <div class="card z-index-0 fadeIn3 fadeInBottom">
              <div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
                <div class="bg-gradient-primary shadow-primary border-radius-lg py-3 pe-1">
                  <h4 class="text-white font-weight-bolder text-center mt-2 mb-0">Sign in</h4>
                  <div class="row mt-3">
                    <div class="col-2 text-center ms-auto">
                      <a class="btn btn-link px-3" href="javascript:;">
                        <i class="fa fa-facebook text-white text-lg"></i>
                      </a>
                    </div>
                    <div class="col-2 text-center px-1">
                      <a class="btn btn-link px-3" href="javascript:;">
                        <i class="fa fa-github text-white text-lg"></i>
                      </a>
                    </div>
                    <div class="col-2 text-center me-auto">
                      <a class="btn btn-link px-3" href="javascript:;">
                        <i class="fa fa-google text-white text-lg"></i>
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              <div class="card-body">
                  <div class="input-group input-group-outline my-6">
                                            <Radzen.Blazor.RadzenTextBox Placeholder="Username..." type="email" class="form-control form-control-user"  @bind-Value="@UserName" />
                  </div>
                  <div class="input-group input-group-outline mb-6">
                                            <Radzen.Blazor.RadzenTextBox Placeholder="Password..." type="password" class="form-control form-control-user"  @bind-Value="@Password" />
                  </div>
                  <div class="form-check form-switch d-flex align-items-center mb-3">
                                            <RadzenCheckBox @bind-Value="RememberMe" />
                    <label class="form-check-label mb-0 ms-3" for="rememberMe">Remember me</label>
                  </div>
                  <div class="text-center">
                                            <Radzen.Blazor.RadzenButton Icon="person" Text="Login" Click="@LogUserIn" />
                  </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</div>
</div></div>

@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    string UserName = string.Empty;
    string Password = string.Empty;
    private const string UserCookieName = "CurrentUserInformation";
    private string CookieValue = string.Empty;
    bool RememberMe = false;
    protected override void OnInitialized()
    {
        AppState.SetProperty(this, "CurrentUser", new MCON451.Entity.UserEntity());
        TryAutoLogin();
    }
    private async void TryAutoLogin()
    {
        try
        {
            CookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", UserCookieName);

            //cookieValue = ITPS.Data.Code.EncryptionFactory.EncryptString("joshs|joshs");
            if (!string.IsNullOrEmpty(CookieValue))
            {
                CookieValue = MCON451.Data.Code.EncryptionFactory.DecryptString(CookieValue);
                if (!string.IsNullOrEmpty(CookieValue))
                {
                    var userArray = CookieValue.Split("|");
                    UserName = userArray[0].ToString();
                    Password = userArray[1].ToString();
                    RememberMe = true;
                    LogUserIn();
                }
            }
        }
        catch (Exception ex)
        {
            AppState.CurrentUser.ErrorMessage = ex.Message;
        }
    }
    private async void ReadCookie(string cookieName)
    {
        CookieValue = await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", cookieName);
        //var returnValue= await cookieFactory.ReadCookie(cookieName);
        //return returnValue;
    }
    private async void SaveCookie()
    {
        string cookieValue = AppState.CurrentUser.UserName + "|" + AppState.CurrentUser.Password;
        cookieValue = MCON451.Data.Code.EncryptionFactory.EncryptString(cookieValue);
        await cookieFactory.WriteCookie(UserCookieName, cookieValue, "15");
    }
    private void LogUserIn()
    {
        AppState.SetProperty(this, "CurrentUser", MCON451.Data.Code.UserFactory.GetUserInformation(UserName, Password));
        RefreshMainLayout();
        if (string.IsNullOrEmpty(AppState.CurrentUser.ErrorMessage))
        {
            if (RememberMe) { SaveCookie(); }
            NavManager.NavigateTo("/", false);
        }
        else
        { notificationService.Notify(Radzen.NotificationSeverity.Error, "Error Logging In", AppState.CurrentUser.ErrorMessage, 3000); }
    }
    private async void RefreshMainLayout()
    {
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        {

        }
    }
    private void PopForgotPassword()
    {
        //DialogService.Open<Pages.Popups.ForgotPassword>("Forgot Password", null, new DialogOptions() { Width = "800px", Height = "600px", Resizable = true, Draggable = true });
    }
}
