@page "/MonthlySalesForm"
@page "/MonthlySalesForm/{MonthlySalesKey}"
@using MCON451.Entity

@if (!string.IsNullOrEmpty(PageModel?.PageMessage))
{
    <div class="alert alert-success" role="alert" style="color:white">
        @((MarkupString)PageModel.PageMessage)
    </div>
    <br />
}
@if (PageModel?.ErrorObject != null)
{
    <div class="alert alert-danger" role="alert" style="color:white">
        @((MarkupString)PageModel.ErrorObject.Message)
    </div>
    <br />
}
<h2>Monthly Sales ID: @GetMonthlySalesKey()</h2>
<div class="row">
    <div class="col-md-6">
        <b>Sales Rep</b><br />
        <RadzenDropDown AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" @bind-Value=@PageModel.StoreSalesRepresentativeKey Data=@PageModel.ListOfReps TextProperty="StringValue" ValueProperty="IntValue" class="form-control" />
    </div>
    <div class="col-md-6">
        <b>Campaign</b><br />
        <RadzenDropDown AllowFiltering=true FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" @bind-Value=@PageModel.CampaignKey Data=@PageModel.ListOfCampaigns TextProperty="StringValue" ValueProperty="IntValue" class="form-control" />
    </div>
</div>
<br />
<div class="row">
    <div class="col-md-4">
        <b>Sales Month</b><br />
        <RadzenNumeric Min="1" Max="12" Placeholder="@DateTime.Now.AddYears(0).Month.ToString()" @bind-Value=@PageModel.SalesMonth class="form-control" />
    </div>
    <div class="col-md-4">
        <b>Sales Year</b>        <br />
        <RadzenNumeric Min="2020" Placeholder="@DateTime.Now.AddYears(0).Year.ToString()" Max="@DateTime.Now.AddYears(1).Year" @bind-Value=@PageModel.SalesYear class="form-control" />
    </div>
    <div class="col-md-4">
        <b>Sales Amount</b> <br />
        <RadzenNumeric TValue="decimal" Placeholder="0.00" @bind-Value=@PageModel.SalesAmount class="form-control" Format="c" />
    </div>
</div>
<br />
<RadzenButton Click=@(args => SaveSales()) Text="Save Sales" style="float:right"  Icon="check_circle" ButtonStyle="ButtonStyle.Success" />
@code {
    [Parameter]
    public string MonthlySalesKey { get; set; }
    private MonthlySalesFormEntity PageModel = new();
    protected override void OnInitialized()
    {
        ReloadModel();
    }
    private void ReloadModel()
    {
        PageModel = MCON451.Data.Code.MonthlySalesFormFactory.GetFormData(!string.IsNullOrEmpty(MonthlySalesKey) ? Convert.ToInt32(MonthlySalesKey) : 0);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ReloadModel();
    }
    private void SaveSales()
    {
        string pageMessage;
        if(ValidateInput())
        {
            PageModel.ErrorObject = null;
            PageModel = MCON451.Data.Code.MonthlySalesFormFactory.SaveMonthlySales(PageModel);
        }
        if(PageModel.ErrorObject ==null)
        {
            pageMessage = PageModel.PageMessage;
            PageModel = new();
            PageModel.PageMessage = pageMessage;
        }
    }
    private bool ValidateInput()
    {
        if(PageModel.StoreSalesRepresentativeKey==0)
        { PageModel.ErrorObject = new("The Sales Rep is a required field"); return false; }
        else if (PageModel.SalesAmount <= 0)
        { PageModel.ErrorObject = new("The Sales Amount must be a positive number"); return false; }
        else if (PageModel.SalesMonth == 0)
        { PageModel.ErrorObject = new("The Sales Month is invalid"); return false; }
        else if (PageModel.SalesYear == 0)
        { PageModel.ErrorObject = new("The Sales Year is invalid"); return false; }
        return true;
    }
    private string GetMonthlySalesKey()
    {
        return PageModel.MonthlySalesKey > 0 ? PageModel.MonthlySalesKey.ToString() : "UNSAVED";
    }
}
